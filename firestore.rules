rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection and subcollections
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Calendar Providers subcollection
      match /calendarProviders/{providerId} {
        // Only allow read/write if user owns the document and provider type is valid
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId) && 
          isValidProvider() &&
          hasRequiredCalendarFields();
        allow update: if isAuthenticated() && isOwner(userId) && 
          isValidProvider() &&
          hasRequiredCalendarFields() &&
          onlyAllowedFieldsChanged();
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      
      
      match /categories/{categoryId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Helper functions for calendar provider validation
    function isValidProvider() {
      let validTypes = ['google', 'microsoft'];
      return validTypes.hasAny([request.resource.data.type]);
    }
    
    function hasRequiredCalendarFields() {
      let requiredFields = [
        'type',
        'accessToken',
        'refreshToken',
        'expiresAt',
        'email'
      ];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.type is string &&
        request.resource.data.accessToken is string &&
        request.resource.data.refreshToken is string &&
        request.resource.data.expiresAt is number &&
        request.resource.data.email is string;
    }
    
    function onlyAllowedFieldsChanged() {
      let allowedFields = [
        'accessToken',
        'refreshToken',
        'expiresAt',
        'name'
      ];
      
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }

    // Stripe-related collections
    match /customers/{uid} {
      allow read: if isAuthenticated() && request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if isAuthenticated() && request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if isAuthenticated() && request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if isAuthenticated() && request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // Meetings collection
    match /meetings/{meetingId} {
      allow read: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Action Items collection
    match /actionItems/{actionItemId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid ||
         (resource.data.meetingId != null && 
          get(/databases/$(database)/documents/meetings/$(resource.data.meetingId)).data.userId == request.auth.uid));
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Kanban columns collection
    match /kanbanColumns/{columnId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Vector store collection
    match /vectorStore/{docId} {
      allow read: if isAuthenticated() && 
        resource.data.metadata.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.metadata.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.metadata.userId == request.auth.uid;
    }

    // Config collection - read only
    match /config/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if true;
      allow write: if false;
    }
  }
}